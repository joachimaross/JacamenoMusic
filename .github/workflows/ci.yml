name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: jacameno_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: packages/backend/package-lock.json
      
      - name: Install dependencies
        working-directory: packages/backend
        run: npm ci
      
      - name: Run linter
        working-directory: packages/backend
        run: npm run lint
      
      - name: Run tests
        working-directory: packages/backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/jacameno_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret
        run: npm test

  ai-services-test:
    name: AI Services Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: packages/ai-services/requirements.txt
      
      - name: Install dependencies
        working-directory: packages/ai-services
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov black isort
      
      - name: Check code formatting
        working-directory: packages/ai-services
        run: |
          black --check .
          isort --check-only .
      
      - name: Run tests
        working-directory: packages/ai-services
        run: pytest --cov=. --cov-report=xml
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./packages/ai-services/coverage.xml
          flags: ai-services

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build Backend Image
        uses: docker/build-push-action@v4
        with:
          context: ./packages/backend
          push: false
          tags: jacameno-backend:test
      
      - name: Build AI Services Image
        uses: docker/build-push-action@v4
        with:
          context: ./packages/ai-services
          push: false
          tags: jacameno-ai-services:test
